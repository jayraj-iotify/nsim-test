{
  "id": "62ea4f5e6d2a5e9329992890",
  "name": "Smart Elevator",
  "tags": {},
  "labels": [],
  "workspaceId": "6246fbe2fdee1fd07c3bb327",
  "version": 1,
  "createdBy": "6246fbe2fdee1fd07c3bb324",
  "lastUpdateBy": "6246fbe2fdee1fd07c3bb324",
  "lastUpdatedOn": "2022-08-03T10:35:10.074Z",
  "definition": {
    "protocol": "mqtt",
    "clientId": "",
    "additionalPackages": {},
    "strategy": "Default",
    "settings": {
      "url": "mqtt://broker.hivemq.com:1883",
      "topic": "/hello/",
      "subscriptionTopics": [
        "/hello",
        "/world"
      ],
      "timeout": 10000,
      "qos": 0,
      "retain": false,
      "keepalive": 10000,
      "reconnectPeriod": 60000,
      "connectTimeout": 60000,
      "username": "",
      "password": "",
      "identity": "",
      "psk": "",
      "key": "",
      "cert": "",
      "ca": ""
    },
    "model": {
      "currentState": "Init",
      "stateMap": {
        "Init": {
          "name": "Init",
          "isEnabled": true,
          "sender": "{\n  state.floors = 10\n  state.current_floor = 0\n  state.max_passengers = 8\n  state.scheduled_maintenance_interval = 20\n  state.maintenance_cycles = 5\n  state.call_rate = 0.1\n  state.ride_rate = 0.11\n  state.maintenance_due = false\n  state.stats = {\n    calls: 0,\n    calls_since_maintenance: 0,\n    rides: 0,\n    rides_since_maintenance: 0\n  }\n\n  next('Idle')\n}",
          "receiver": "",
          "icon": "",
          "index": 0
        },
        "Idle": {
          "name": "Idle",
          "isEnabled": true,
          "sender": "\n{\n  var current_status = \"idle\"\n  var now = dayjs().format()\n\n  var message = {\n    timestamp: now,\n    status: current_status\n  }\n\n  if (chance.bool({ likelihood: 1 })) {\n    next('Fault')\n  }\n  else {\n    if (chance.bool({ likelihood: 1 })) {\n      next('On_Call')\n    }\n    else {\n      next('On_Ride')\n    }\n  }\n  \n  return JSON.stringify(message, null, 2);\n}\n",
          "receiver": "",
          "icon": "",
          "index": 1
        },
        "Fault": {
          "name": "Fault",
          "isEnabled": true,
          "sender": "\n{\n  var current_status = \"fault\"\n  var now = dayjs().format()\n\n  state.maintenance_due = true\n\n  var message = {\n    timestamp: now,\n    status: current_status\n  }\n\n  next('Maintenance')\n  return JSON.stringify(message, null, 2);\n\n}\n\n",
          "receiver": "",
          "index": 2,
          "icon": ""
        },
        "Maintenance": {
          "name": "Maintenance",
          "isEnabled": true,
          "sender": "if (state.maintenance_due) {\n\n  var current_status = \"maintenance\"\n  var now = dayjs().format()\n  state.maintenance_due = false\n\n  state.stats.calls_since_maintenance = 0\n  state.stats.rides_since_maintenance = 0\n  \n  var message = {\n    timestamp: now,\n    status: current_status\n  }\n\n  if (--state.maintenance_cycles <= 0) {\n    state.maintenance_cycles = 5\n    next('On_Ride')\n\n  }\n\n  return JSON.stringify(message, null, 2);\n}\n\n\n\n\n",
          "receiver": "",
          "index": 3,
          "icon": ""
        },
        "On_Call": {
          "name": "On_Call",
          "isEnabled": true,
          "sender": "\n{\n  var current_status = \"on call\"\n  var now = dayjs().format()\n\n  state.stats.calls = state.stats.calls + 1\n  state.stats.calls_since_maintenance = state.stats.calls_since_maintenance + 1\n  state.current_floor = chance.integer({ min: 0, max: state.floors - 1 })\n\n  var message = {\n    timestamp: now,\n    status: current_status\n  }\n\n  next('On_Ride')\n  return JSON.stringify(message, null, 2);\n\n}\n\n",
          "receiver": "",
          "index": 4,
          "icon": ""
        },
        "On_Ride": {
          "name": "On_Ride",
          "isEnabled": true,
          "sender": "\n{\n  var current_status = \"on ride\"\n  var now = dayjs().format()\n\n  state.stats.rides = state.stats.rides + 1\n  state.stats.rides_since_maintenance = state.stats.rides_since_maintenance + 1\n  var current_weight = 70 * chance.integer({ min: 1, max: state.max_passengers })\n  state.current_floor = chance.integer({ min: 0, max: state.floors - 1 })\n\n  if (state.stats.calls_since_maintenance + state.stats.rides_since_maintenance >= state.scheduled_maintenance_interval) {\n    state.maintenance_due = true\n    next('Maintenance')\n  }\n  var message = {\n    timestamp: now,\n    status: current_status,\n    weight: current_weight,\n    floor: state.current_floor,\n    total_calls: state.stats.calls,\n    total_rides: state.stats.rides,\n    maintenance_due: state.maintenance_due\n  }\n\n  if (chance.bool({ likelihood: 1 })) {\n    next('Fault')\n  }\n  else {\n    if (chance.bool({ likelihood: 1 })) {\n      next('On_Call')\n    }\n    else {\n      next('On_Ride')\n    }\n  }\n  return JSON.stringify(message, null, 2);\n\n}\n\n",
          "receiver": "",
          "index": 5,
          "icon": ""
        },
        "Finished": {
          "name": "Finished",
          "isEnabled": true,
          "sender": "",
          "receiver": "",
          "icon": "",
          "index": 6
        }
      },
      "setup": "",
      "teardown": ""
    }
  }
}