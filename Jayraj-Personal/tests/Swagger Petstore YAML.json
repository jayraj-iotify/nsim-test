{
  "name": "Swagger Petstore YAML",
  "tags": {
    "description": "Generated from OpenAPI spec",
    "pre_notification": {
      "title": "Test Created",
      "message": "The OpenAPI spec you provided has been successfully parsed and a test has been generated. Please check the notes in the init section before you get started."
    },
    "post_notification": {
      "title": "Success!",
      "message": "Please check the notes in the init section before you get started."
    },
    "inputs": {
      "SERVER_HOSTNAME": {
        "type": "text",
        "value": "",
        "description": "Hostname without 'http'",
        "minlength": 3
      }
    }
  },
  "labels": [],
  "version": 1,
  "definition": {
    "protocol": "none",
    "clientId": "",
    "additionalPackages": {},
    "strategy": "Default",
    "settings": {
      "url": "mqtt://broker.hivemq.com:1883",
      "topic": "/hello/",
      "subscriptionTopics": [
        "/hello",
        "/world"
      ],
      "timeout": 10000,
      "qos": 0,
      "retain": false,
      "keepalive": 10000,
      "reconnectPeriod": 60000,
      "connectTimeout": 60000,
      "username": "",
      "password": "",
      "identity": "",
      "psk": "",
      "key": "",
      "cert": "",
      "ca": "",
      "headers": {
        "accept": "application/json"
      },
      "method": "GET"
    },
    "model": {
      "currentState": "Init",
      "stateMap": {
        "Init": {
          "name": "Init",
          "isEnabled": true,
          "sender": "{ \n  /*\n  Please note the following:\n      - This Test has been auto-generated from the OpenAPI spec provided by the user. \n      - Each stage in this test represents a path in the API.\n      - Each stage has functions within it to test each method available on that path. \n      - The generator checks the 'type' of the property expected and intelligenly \n        substitutes it with a helper function to generate random data\n      - Payload types that were not recognized have been substituted with \n        \"UNRECOGNIZED\". Please correct these manually\n      - Please use the 'Format Code' button on the top-right corner of the editor  \n   */\n\n  state.basePath = \"https://<SERVER_HOSTNAME>/v2\";\n  state.testSummary = {};\n\n state.auth = { type: \"apiKey\", name: \"api_key\", in: \"header\", apiKey: (await glob.get(\"swagger-petstore-yaml-api-key\")) || \"API Key Missing\" } \n\n  console.log(\"Starting test for Swagger Petstore YAML, Version: 1.0.0\");\n  console.log(\"The following paths have been identified\");\n\n  next(\"pet\");\n}\n",
          "receiver": "",
          "icon": "",
          "index": 0
        },
        "Finished": {
          "name": "Finished",
          "isEnabled": true,
          "sender": "\n{\nconsole.log('hello from finished')\n\n}\n",
          "receiver": "",
          "icon": "",
          "index": 14
        },
        "pet": {
          "name": "pet",
          "isEnabled": true,
          "sender": "{\n let path = \"/pet\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /pet path\")\nasync function POST() {\nlet url = state.basePath + path;\nlet props = {id: chance.integer({ min: 1, max: 100 }),category: {id: chance.integer({ min: 1, max: 100 }),name: chance.name(),},name: chance.name(),photoUrls: [chance.avatar(),],tags: [{id: chance.integer({ min: 1, max: 100 }),name: chance.name(),},],status: chance.pickone(['dead', 'alive']),}\n const postOptions = {headers: {'Content-Type': 'application/json'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /pet | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nasync function PUT() {\nlet url = state.basePath + path;\nlet props = {id: chance.integer({ min: 1, max: 100 }),category: {id: chance.integer({ min: 1, max: 100 }),name: chance.name(),},name: chance.name(),photoUrls: [chance.avatar(),],tags: [{id: chance.integer({ min: 1, max: 100 }),name: chance.name(),},],status: chance.pickone(['dead', 'alive']),}\n const putOptions = {headers: {'Content-Type': 'application/json'}}\nlet putStartTime = Date.now();\nlet putRes = false;\ntry {\n  putRes = await rest.put(url, props, putOptions);\n} catch(e){\n  console.error(\"PUT failed on path /pet | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - putStartTime\nconsole.log(\"PUT was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-put\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].putResult = await PUT();\n\nnext(\"pet/findByStatus\");\n}",
          "receiver": "",
          "icon": "",
          "index": 1
        },
        "pet/findByStatus": {
          "name": "pet/findByStatus",
          "isEnabled": true,
          "sender": "{\n let path = \"/pet/findByStatus\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /pet/findByStatus path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {}\n let queryParams = {status: chance.pickone(['dead', 'alive']),}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /pet/findByStatus | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nnext(\"pet/findByTags\");\n}",
          "receiver": "",
          "icon": "",
          "index": 2
        },
        "pet/findByTags": {
          "name": "pet/findByTags",
          "isEnabled": true,
          "sender": "{\n let path = \"/pet/findByTags\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /pet/findByTags path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {}\n let queryParams = {tags: \"UNRECOGNIZED\",}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /pet/findByTags | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nnext(\"pet/{petId}\");\n}",
          "receiver": "",
          "icon": "",
          "index": 3
        },
        "pet/{petId}": {
          "name": "pet/{petId}",
          "isEnabled": true,
          "sender": "{\n let path = \"/pet/{petId}\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /pet/{petId} path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {petId: chance.pickone(['1', '2', '3']),}\n let queryParams = {}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /pet/{petId} | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nasync function POST() {\nlet url = state.basePath + path;\n let pathParams = {petId: chance.pickone(['1', '2', '3']),}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\nlet props = {name: chance.name(),status: chance.pickone(['dead', 'alive']),}\n const postOptions = {headers: {'Content-Type': 'application/x-www-form-urlencoded'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /pet/{petId} | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\n // CODE FOR DELETE\nnext(\"pet/{petId}/uploadImage\");\n}",
          "receiver": "",
          "icon": "",
          "index": 4
        },
        "pet/{petId}/uploadImage": {
          "name": "pet/{petId}/uploadImage",
          "isEnabled": true,
          "sender": "{\n let path = \"/pet/{petId}/uploadImage\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /pet/{petId}/uploadImage path\")\nasync function POST() {\nlet url = state.basePath + path;\n let pathParams = {petId: chance.pickone(['1', '2', '3']),}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\nlet props = {additionalMetadata: \"UNRECOGNIZED\",file: \"UNRECOGNIZED\",}\n const postOptions = {headers: {'Content-Type': 'application/x-www-form-urlencoded'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /pet/{petId}/uploadImage | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nnext(\"store/inventory\");\n}",
          "receiver": "",
          "icon": "",
          "index": 5
        },
        "store/inventory": {
          "name": "store/inventory",
          "isEnabled": true,
          "sender": "{\n let path = \"/store/inventory\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /store/inventory path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {}\n let queryParams = {}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /store/inventory | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nnext(\"store/order\");\n}",
          "receiver": "",
          "icon": "",
          "index": 6
        },
        "store/order": {
          "name": "store/order",
          "isEnabled": true,
          "sender": "{\n let path = \"/store/order\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /store/order path\")\nasync function POST() {\nlet url = state.basePath + path;\nlet props = {id: chance.integer({ min: 1, max: 100 }),petId: chance.integer({ min: 1, max: 100 }),quantity: chance.integer({ min: 1, max: 100 }),shipDate: \"UNRECOGNIZED\",status: chance.pickone(['dead', 'alive']),complete: chance.bool(),}\n const postOptions = {headers: {'Content-Type': 'application/json'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /store/order | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nnext(\"store/order/{orderId}\");\n}",
          "receiver": "",
          "icon": "",
          "index": 7
        },
        "store/order/{orderId}": {
          "name": "store/order/{orderId}",
          "isEnabled": true,
          "sender": "{\n let path = \"/store/order/{orderId}\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /store/order/{orderId} path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {orderId: \"UNRECOGNIZED\",}\n let queryParams = {}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /store/order/{orderId} | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \n // CODE FOR DELETE\nnext(\"user\");\n}",
          "receiver": "",
          "icon": "",
          "index": 8
        },
        "user": {
          "name": "user",
          "isEnabled": true,
          "sender": "{\n let path = \"/user\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user path\")\nasync function POST() {\nlet url = state.basePath + path;\nlet props = {id: chance.integer({ min: 1, max: 100 }),username: \"UNRECOGNIZED\",firstName: \"UNRECOGNIZED\",lastName: \"UNRECOGNIZED\",email: \"UNRECOGNIZED\",password: \"UNRECOGNIZED\",phone: \"UNRECOGNIZED\",userStatus: chance.integer({ min: 1, max: 100 }),}\n const postOptions = {headers: {'Content-Type': 'application/json'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /user | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nnext(\"user/createWithArray\");\n}",
          "receiver": "",
          "icon": "",
          "index": 9
        },
        "user/createWithArray": {
          "name": "user/createWithArray",
          "isEnabled": true,
          "sender": "{\n let path = \"/user/createWithArray\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user/createWithArray path\")\nasync function POST() {\nlet url = state.basePath + path;\nlet props = [{id: chance.integer({ min: 1, max: 100 }),username: \"UNRECOGNIZED\",firstName: \"UNRECOGNIZED\",lastName: \"UNRECOGNIZED\",email: \"UNRECOGNIZED\",password: \"UNRECOGNIZED\",phone: \"UNRECOGNIZED\",userStatus: chance.integer({ min: 1, max: 100 }),},]\n const postOptions = {headers: {'Content-Type': 'application/json'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /user/createWithArray | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nnext(\"user/createWithList\");\n}",
          "receiver": "",
          "icon": "",
          "index": 10
        },
        "user/createWithList": {
          "name": "user/createWithList",
          "isEnabled": true,
          "sender": "{\n let path = \"/user/createWithList\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user/createWithList path\")\nasync function POST() {\nlet url = state.basePath + path;\nlet props = [{id: chance.integer({ min: 1, max: 100 }),username: \"UNRECOGNIZED\",firstName: \"UNRECOGNIZED\",lastName: \"UNRECOGNIZED\",email: \"UNRECOGNIZED\",password: \"UNRECOGNIZED\",phone: \"UNRECOGNIZED\",userStatus: chance.integer({ min: 1, max: 100 }),},]\n const postOptions = {headers: {'Content-Type': 'application/json'}}\nlet postStartTime = Date.now();\nlet postRes = false;\ntry {\n  postRes = await rest.post(url, props, postOptions);\n} catch(e){\n  console.error(\"POST failed on path /user/createWithList | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - postStartTime\nconsole.log(\"POST was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-post\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].postResult = await POST();\n\nnext(\"user/login\");\n}",
          "receiver": "",
          "icon": "",
          "index": 11
        },
        "user/login": {
          "name": "user/login",
          "isEnabled": true,
          "sender": "{\n let path = \"/user/login\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user/login path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {}\n let queryParams = {username: \"UNRECOGNIZED\",password: \"UNRECOGNIZED\",}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /user/login | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nnext(\"user/logout\");\n}",
          "receiver": "",
          "icon": "",
          "index": 12
        },
        "user/logout": {
          "name": "user/logout",
          "isEnabled": true,
          "sender": "{\n let path = \"/user/logout\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user/logout path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {}\n let queryParams = {}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /user/logout | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nnext(\"user/{username}\");\n}",
          "receiver": "",
          "icon": "",
          "index": 13
        },
        "user/{username}": {
          "name": "user/{username}",
          "isEnabled": true,
          "sender": "{\n let path = \"/user/{username}\";\n state.testSummary[path] = {};\n console.log(\"Starting test for /user/{username} path\")\n async function GET(){\n  let url = state.basePath + path;\n let pathParams = {username: \"UNRECOGNIZED\",}\n let queryParams = {}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\n if (Object.keys(queryParams).length > 0) {\n  let isFirstQuery = true\n  Object.keys(queryParams).forEach((queryKey) => {\n    if (isFirstQuery) {\n      url += \"?\" + queryKey + \"=\" + queryParams[queryKey]\n      isFirstQuery = false\n    } else {\n      url += \"&\" + queryKey + \"=\" + queryParams[queryKey]\n    }\n  });\n }\n let getStartTime = Date.now();\n let getRes = false;\n try {\n  getRes = await rest.get(url);\n } catch (e) {\n  console.error(\"GET failed on path /user/{username} | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false };\n }\n let testTime = Date.now() - getStartTime;\n console.log(\"GET was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-get\", testTime)\n return { success: true, time: testTime };\n }\n state.testSummary[path].getResult = await GET();\n \n \nasync function PUT() {\nlet url = state.basePath + path;\n let pathParams = {username: \"UNRECOGNIZED\",}\n if (Object.keys(pathParams).length > 0) {\n  Object.keys(pathParams).forEach((paramKey) => {\n    url += \"/\" + pathParams[paramKey];\n  });\n }\nlet props = {}\n const putOptions = {headers: {'Content-Type': 'application/x-www-form-urlencoded'}}\nlet putStartTime = Date.now();\nlet putRes = false;\ntry {\n  putRes = await rest.put(url, props, putOptions);\n} catch(e){\n  console.error(\"PUT failed on path /user/{username} | \"+ e?.response?.status + \" - \" + e?.response?.statusText);\n  return { success: false}\n}\nlet testTime = Date.now() - putStartTime\nconsole.log(\"PUT was successful and took \"+testTime+\"ms.\")\nmetric.add(\"latency-all-endpoints\", testTime)\nmetric.add(\"latency-put\", testTime)\nreturn {success: true, time: testTime}\n}\nstate.testSummary[path].putResult = await PUT();\n\n // CODE FOR DELETE\nnext(\"Finished\");\n}",
          "receiver": "",
          "icon": "",
          "index": 14
        }
      },
      "setup": "",
      "teardown": ""
    }
  },
  "workspaceId": "6246fbe2fdee1fd07c3bb327"
}