{
  "id": "62ea56bc6d2a5e93299928a6",
  "name": "powerful-harriott",
  "tags": {},
  "labels": [],
  "workspaceId": "6246fbe2fdee1fd07c3bb327",
  "version": 1,
  "createdBy": "6246fbe2fdee1fd07c3bb324",
  "lastUpdateBy": "6246fbe2fdee1fd07c3bb324",
  "lastUpdatedOn": "2022-08-03T11:06:36.310Z",
  "definition": {
    "protocol": "mqtt",
    "clientId": "",
    "additionalPackages": {},
    "strategy": "Default",
    "settings": {
      "url": "mqtt://broker.hivemq.com:1883",
      "topic": "/hello/",
      "subscriptionTopics": [
        "/hello",
        "/world"
      ],
      "timeout": 10000,
      "qos": 0,
      "retain": false,
      "keepalive": 10000,
      "reconnectPeriod": 60000,
      "connectTimeout": 60000,
      "username": "",
      "password": "",
      "identity": "",
      "psk": "",
      "key": "",
      "cert": "",
      "ca": ""
    },
    "model": {
      "currentState": "Init",
      "stateMap": {
        "Init": {
          "name": "Init",
          "isEnabled": true,
          "sender": "{\n  // generate a random Californian license plate number\n  state.license = 'CA ' + chance.string({ length: 6, pool: 'ABCDEFGHIJKLMNOP0123456' });\n\n  // retrieve the last odometer value from the glob, if not found then set a new one. \n  var odometer = glob.get('mycar_' + client() + \"_odo\");\n  if (!odometer) {\n    state.odometer = chance.integer({ min: 10000, max: 100000 });\n    glob.set('mycar_' + client() + \"_odo\", state.odometer);\n  }\n  else {\n    state.odometer = odometer;\n  }\n  // generate random VIN\n  state.VIN = chance.string({ length: 15, casing: 'upper', alpha: true, numeric: true });\n\n  state.remoteDisabled = false;\n\n  state.cpu = weather.temperature({ location: 'London, UK', unit: 'f' });\n\n  console.log(state.cpu)\n\n  next('Running')\n}",
          "receiver": "",
          "icon": "",
          "index": 0
        },
        "Running": {
          "name": "Running",
          "isEnabled": true,
          "sender": "{\n  // The template simulates a drive from San Jose to SF. Change the address to suit your needs. \n  // simulates a plugged in OBD-II adapter with completely random data. \n  // The template also received a remote disable command from the backend. \n  // The odometer value is stored in the glob and retrieved for each car id. \n\n  var payload = {};\n\n  if (state.remoteDisabled === true) {\n    // car has been disabled remotely from the server. Do not change the location.  \n    payload.engine = \"off\";\n  }\n  else {\n    state.location = drive({ start: 'San Jose, CA', end: 'San Francisco, CA' })\n    payload.engine = \"on\";\n  }\n  payload.latitude = state.location.latitude;\n  payload.longitude = state.location.longitude;\n  payload.speed = state.location.speed;\n\n  // set headlights on/off based on current hour\n  state.hour = moment().hour();\n  if (state.hour < 7 || state.hour > 18) {\n    payload.lights = true;\n  }\n  else {\n    payload.lights = false;\n  }\n\n  payload.license = state.license;\n  payload.VIN = state.VIN;\n\n  state.odometer += 100;\n  payload.odometer = state.odometer;\n\n  // simulate an OBD-II unit\n  // https://en.wikipedia.org/wiki/OBD-II_PIDs\n  payload.obd = {\n    pid: chance.integer({ min: 0, max: 166 }),\n    data: chance.integer({ min: 0, max: 2048 }),\n  };\n\n  payload.ts = moment.now();\n\n  next('Running')\n  return JSON.stringify(payload, null, 2);\n}",
          "receiver": "",
          "icon": "",
          "index": 1
        },
        "Finished": {
          "name": "Finished",
          "isEnabled": true,
          "sender": "",
          "receiver": "",
          "icon": "",
          "index": 2
        }
      },
      "setup": "",
      "teardown": ""
    }
  }
}